Net_Load, Net_Load_Total, Marginal_Resource,
Smp_Max_Date_Time, Smp_Max_Demand, Smp_Max_Capacity,
Run_ID, Imports, Exports))
# Select the Import/Export data
Import <- ZH %>%
subset(., select = c(date, Imports, Run_ID)) %>%
'colnames<-'(c("date", "Output_MWH", "Run_ID")) %>%
add_column(ID = "Import")
Export <- ZH %>%
subset(., select = c(date, Exports, Run_ID)) %>%
'colnames<-'(c("date", "Output_MWH", "Run_ID")) %>%
add_column(ID = "Export")
Export$Output_MWH <- Export$Output_MWH * -1
ImEx <- rbind(Import, Export)
}
################################################################################
# This function filters for the data that will be evaluated.
################################################################################
{
sim_filt <- function(inputdata) {
# Filter the data by resource
{Coal <- inputdata %>%
filter(ID=="LTO_Coal")
Coal2Gas  <- inputdata %>%
filter(ID=="LTO_Coal2Gas")
Cogen  <- inputdata %>%
filter(ID=="LTO_Cogen")
NatGas <- inputdata %>%
filter(ID=="LTO_NatGas")
Other <- inputdata %>%
filter(ID=="LTO_Other")
Solar <- inputdata %>%
filter(ID=="LTO_Solar")
Storage <- inputdata %>%
filter(ID=="LTO_Storage")
Wind <- inputdata %>%
filter(ID=="LTO_Wind")
}
# Combine the grouped data
{case <- rbind(Coal, Coal2Gas, Cogen, NatGas, Solar, Wind, Storage, Other)
case$ID <- factor(case$ID, levels=c("LTO_Coal", "LTO_Coal2Gas", "LTO_Cogen",
"LTO_NatGas", "LTO_Other", "LTO_Wind",
"LTO_Solar", "LTO_Storage"))
}
return(case)
}
# Filters for storage data
stor_filt <- function(inputdata) {
# Filter the data by resource
stor <- inputdata %>%
filter(ID=="LTO_Storage")
return(stor)
}
# Function to convert the date time for plotting
HrTime <- function(data, year, month, day) {
subset(data,
(date >= paste(year,"-", month, "-", day," 01:00:00", sep = "") &
date <=
paste(year,"-", month, "-", (day+7)," 23:00:00", sep = "")))
}
}
################################################################################
################################################################################
# Plotting functions defined
################################################################################
################################################################################
{
################################################################################
# Functions for weekly evaluation
################################################################################
Week1 <- function(year, month, day, case) {
# Add imports and exports to data
# Filters for the desired case study
data <- Hour_pl %>%
sim_filt(.) %>%
rbind(.,Import) %>%
filter(Run_ID == case)
data$ID <- factor(data$ID, levels=c("Import", "LTO_Coal",
"LTO_Coal2Gas", "LTO_Cogen", "LTO_NatGas",
"LTO_Other", "LTO_Wind", "LTO_Solar",
"LTO_Storage"))
# Select only a single week
WK <- HrTime(data,year,month,day)
ZPrice <- HrTime(ZH,year,month,day)
# Plot the data
ggplot() +
geom_area(data = WK, aes(x = date, y = Output_MWH, fill = ID),
alpha=0.6, size=.5, colour="black") +
# Add hourly load line
geom_line(data = ZPrice,
aes(x = date, y = Demand), size=2, colour = "black") +
scale_x_datetime(expand=c(0,0)) +
# Set the theme for the plot
theme_bw() +
theme(panel.grid = element_blank(),
legend.position = "right",
) +
scale_y_continuous(expand=c(0,0), limits = c(NA,ylimit)) +
#    ylim(NA,ylimit) +
labs(x = "Date", y = "Output (MWh)", fill = "Resource") +
scale_fill_manual(values = colours1)
}
# Generate weekly storage output plot function
################################################################################
Stor1 <- function(year, month, day, case) {
# Add imports and exports to data
# Filters for the desired case study
data <- Hour_pl %>%
stor_filt(.) %>%
filter(Run_ID == case)
# Select only a single week
WK <- HrTime(data,year,month,day)
MX <- max(WK$Output_MWH)
# Plot the data
ggplot() +
geom_area(data = WK, aes(x = date, y = Output_MWH),
alpha=0.6, size=.5, colour="black") +
ggtitle(year)+
# Set the theme for the plot
theme_bw() +
theme(panel.grid = element_blank(),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
plot.title = element_text(hjust = 0.5)
) +
scale_x_datetime(expand=c(0,0)) +
scale_y_continuous(breaks = seq(-MX, MX, by = MX),
labels = label_number(accuracy = 1)) +
labs(x = "Date", y = "Storage\n(MWh)", fill = "Resource") +
scale_fill_manual(values = "cyan")
}
################################################################################
# Function for plotting prices
################################################################################
week_price <- function(year, month, day,case) {
# Filters for the desired case study
data <- ZH %>%
filter(Run_ID == case)
# Select only a single week using function HrTime
ZPrice <- HrTime(data,year,month,day)
# Plot the data
ggplot() +
geom_line(data = ZPrice,
aes(x = date, y = Price),
size = 1.5, colour = "red") +
theme_bw() +
theme(panel.grid = element_blank(),
axis.title.x=element_blank(),
axis.text.x=element_blank()
) +
labs(y = "$/MWh", fill = "Resource") +
scale_x_datetime(expand=c(0,0)) +
scale_y_continuous(expand=c(0,0),
labels = label_number(accuracy = 1))
#, limits = c(NA, prlimit))
}
################################################################################
# Function for plotting month/year profiles
################################################################################
Eval <- function(input,case) {
# Filters for the desired case study
data <- input %>%
filter(Run_ID == case & Condition == "Average")
# Filter the data by resource
case_Time <- sim_filt(data)
case_Time %>%
ggplot() +
aes(Time_Period, (Output_MWH/1000), fill = ID) +
geom_area(alpha=0.6, size=.5, colour="black") +
#    facet_wrap(~ Condition, nrow = 1) +
theme_bw() +
theme(panel.grid = element_blank(),
axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
legend.justification = c(0,0.5)) +
scale_x_date(expand=c(0,0)) +
scale_y_continuous(expand=c(0,0)) +
scale_fill_manual(values = colours2) +
labs(x = "Date", y = "Output (GWh)", fill = "Resource")
}
################################################################################
# Function for plotting the resources built
################################################################################
# Stacked Area showing totals for Fuel Types
Built <- function(case) {
data <- Build %>%
filter(Run_ID == case & LT_Iteration == max(LT_Iteration) &
Time_Period != "Study")%>%
group_by(Fuel_Type, Time_Period) %>%
summarise(Units = sum(Units_Built))
data$Fuel_Type <- factor(data$Fuel_Type,
levels = c("WND","SUN","Gas0","Gas1", "PS", "OT"))
data %>%
ggplot() +
aes(Time_Period, Units, fill = Fuel_Type, group = Fuel_Type) +
geom_area(alpha=0.6, size=.5, colour="black") +
theme_bw() +
theme(panel.grid = element_blank(),
legend.justification = c(0,0.5)) +
labs(x = "Date", y = "# of Units Built", fill = "Fuel Type") +
scale_y_continuous(expand=c(0,0)) +
scale_x_discrete(expand=c(0,0)) +
scale_fill_manual(values = colours3)
}
# Unit specific bar chart showing builds
Units <- function(case, Fuel) {
data <- Build %>%
filter(Run_ID == case & LT_Iteration == max(LT_Iteration) &
Time_Period == "Study" & Fuel_Type == Fuel)
data %>%
ggplot() +
aes(Name, Units_Built) +
geom_col() +
labs(x = "Plant Name", y = "Units Built") +
theme(axis.text.x = element_text(angle = 75, vjust = 1, hjust = 1))
}
# Unit specific bar chart showing availability not built
Slack <- function(case, Fuel) {
data <- Build %>%
filter(Run_ID == case & LT_Iteration == max(LT_Iteration) &
Time_Period == "Study" & Fuel_Type == Fuel)
data %>%
ggplot() +
aes(Name, Max_Limit_Slack) +
geom_col() +
labs(x = "Plant Name", y = "Units Available") +
theme(axis.text.x = element_text(angle = 75, vjust = 1, hjust = 1))
}
################################################################################
################################################################################
# Combination plotting functions defined
################################################################################
################################################################################
################################################################################
# Function to plot four years for a specific case study
################################################################################
Week4 <- function(month,day,case) {
ggarrange(Week1(Yr1,month,day,case),Week1(Yr2,month,day,case),
Week1(Yr3,month,day,case),Week1(Yr4,month,day,case),
labels = c(Yr1,Yr2),#,Yr3,Yr4),
common.legend = TRUE, legend = "right",
ncol = 2, nrow = 2)
}
################################################################################
# Function to plot Price and Output together
################################################################################
PrOut <- function(year,month,day,case) {
plot_grid(Stor1(year,month,day,case),week_price(year,month,day,case),
Week1(year,month,day,case)+theme(legend.position ="none"),
ncol = 1, align="v", axis = "l",rel_heights = c(1,1,2.5))
}
################################################################################
# Function for plotting the month/year profile with the build
################################################################################
EvalOut <- function(input,case) {
plot_grid(Eval(input,case) + theme(legend.position="top"),
Built(case)+theme(legend.position ="none"),
ncol = 1, align="v", axis = "l",rel_heights = c(3,1))
}
################################################################################
# Function to plot four years for a specific case study of the combined plots
################################################################################
BuildUnits <- function(case, Fuel) {
plot_grid(Units(case,Fuel)+theme(axis.title.x = element_blank(),
axis.text.x = element_blank()),
Slack(case,Fuel),
ncol = 1, align="v", axis = "l",rel_heights = c(1,1))
}
################################################################################
# Function to plot four years for a specific case study of the combined plots
################################################################################
g_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)}
Eval2 <- function(month,day,case) {
ggarrange(arrangeGrob(PrOut(Yr1,month,day,case)+theme(legend.position ="none"),
PrOut(Yr2,month,day,case)+theme(legend.position ="none"),
ncol=2),
g_legend(Week1(Yr1,month,day,case)),
nrow = 2, heights=c(12,1))
}
Eval4 <- function(month,day,case) {
ggarrange(arrangeGrob(PrOut(Yr1,month,day,case)+theme(legend.position ="none"),
PrOut(Yr2,month,day,case)+theme(legend.position ="none"),
PrOut(Yr3,month,day,case)+theme(legend.position ="none"),
PrOut(Yr4,month,day,case)+theme(legend.position ="none"),
ncol=4),
g_legend(Week1(Yr1,month,day,case)),
ncol = 2, widths=c(7,1))
}
}
Week4(03,01,BC)
Week4 <- function(month,day,case) {
ggdraw(add_sub(ggarrange(Week1(Yr1,month,day,case),Week1(Yr2,month,day,case),
Week1(Yr3,month,day,case),Week1(Yr4,month,day,case),
labels = c(Yr1,Yr2),#,Yr3,Yr4),
common.legend = TRUE, legend = "right",
ncol = 2, nrow = 2), DB))
}
Week4(03,01,BC)
# Set the resolution that will be used
res <- 0.05
# Set out the basic structure for the webpage address
cons1 <- "http://www.windatlas.ca/rose-en.php?field=E1&height=80&season=ANU&no=41&lat="
cons2 <- "&lon="
# Create blank dataframe with headers
wind_pot <- data.frame(matrix(ncol = 2, nrow = 0))
x <- c('Latitude', 'Longitude')
colnames(wind_pot) <- x
{
# Set the resolution that will be used
res <- 0.05
# Set out the basic structure for the webpage address
cons1 <- "http://www.windatlas.ca/rose-en.php?field=E1&height=80&season=ANU&no=41&lat="
cons2 <- "&lon="
# Create blank dataframe with headers
wind_pot <- data.frame(matrix(ncol = 2, nrow = 0))
x <- c('Latitude', 'Longitude')
colnames(wind_pot) <- x
}
# Create variables to define limits of data
{
maxLat <- 60
maxLon <- -120
minLat <- 49
minLon <- -110
totLat <- maxLat-minLat
totLon <- abs(maxLon-minLon)
stepLat <- totLat/res
stepLon <- totLon/res
}
for(i in 0:stepLat) {
for(j in 0:stepLon) {
Lon <- (minLon - (j*res))
Lat <- (minLat + (i*res))
wind_pot[nrow(wind_pot)+1,] <- c(Lat, Lon)
}
}
{
# Get province shape
can_level1 = getData("GADM", country = "CA", level = 1)
WGS84 <- CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
canada_level1_ellipsoid = spTransform(can_level1, WGS84)
alberta_ellipsoid =
canada_level1_ellipsoid[which(canada_level1_ellipsoid$NAME_1 == "Alberta"),]
}
library(XML)
library(raster)
{
# Get province shape
can_level1 = getData("GADM", country = "CA", level = 1)
WGS84 <- CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
canada_level1_ellipsoid = spTransform(can_level1, WGS84)
alberta_ellipsoid =
canada_level1_ellipsoid[which(canada_level1_ellipsoid$NAME_1 == "Alberta"),]
}
{
# Excludes any points outside the province
inout = over(
SpatialPoints(wind_pot[,c("Longitude","Latitude")], proj4string=CRS(projection(alberta_ellipsoid))),
as(alberta_ellipsoid,"SpatialPolygons")
)
wind_prof <- wind_pot[!is.na(inout),]
wind_prof[,3] <- 0
x <- c('Latitude', 'Longitude', 'Mean Wind Speed (m/s)')
colnames(wind_prof) <- x
row.names(wind_prof) <- 1:nrow(wind_prof)
}
# Run for loop to enter a series of coordinates in Canada's Wind Atlas and save
# the Annual Mean Wind Speed. THIS TAKES A LONG TIME AND A LOT OF PROCESSING
# POWER. At the end, data will be saved to a RDS in a location printed on screen
{
# Note the start time
old <- Sys.time()
for(i in 1:nrow(wind_prof)) {
url <- paste(cons1, wind_prof[i,1], cons2, wind_prof[i,2], sep = "")
wind <- readHTMLTable(url,which=1)
wind_prof[i,3] <- as.numeric(substr(wind[1,2], 1, 4))
print(paste((i/nrow(wind_prof)*100),"%", sep = ""))
#print(paste(wind_prof[i,1],wind_prof[i,2],sep = ","))
}
# Creates an RDS file with the entire dataset.
saveRDS(Wind_pot, file = paste("WindAtlas_Data", res, sep = "_"))
# Prints the location of the file.
getwd()
# Print the elapsed time
New <- Sys.time() - old
print(New)
}
# Run for loop to enter a series of coordinates in Canada's Wind Atlas and save
# the Annual Mean Wind Speed. THIS TAKES A LONG TIME AND A LOT OF PROCESSING
# POWER. At the end, data will be saved to a RDS in a location printed on screen
{
# Note the start time
old <- Sys.time()
for(i in 1:nrow(wind_prof)) {
url <- paste(cons1, wind_prof[i,1], cons2, wind_prof[i,2], sep = "")
wind <- readHTMLTable(url,which=1)
wind_prof[i,3] <- as.numeric(substr(wind[1,2], 1, 4))
perc <- format(round((i/nrow(wind_prof)*100), 2), nsmall = 2)
print(paste(perc,"%", sep = ""))
#print(paste(wind_prof[i,1],wind_prof[i,2],sep = ","))
}
# Creates an RDS file with the entire dataset.
saveRDS(Wind_pot, file = paste("WindAtlas_Data", res, sep = "_"))
# Prints the location of the file.
getwd()
# Print the elapsed time
New <- Sys.time() - old
print(New)
}
View(wind_prof)
# Run for loop to enter a series of coordinates in Canada's Wind Atlas and save
# the Annual Mean Wind Speed. THIS TAKES A LONG TIME AND A LOT OF PROCESSING
# POWER. At the end, data will be saved to a RDS in a location printed on screen
{
# Note the start time
old <- Sys.time()
for(i in 5613:nrow(wind_prof)) {
url <- paste(cons1, wind_prof[i,1], cons2, wind_prof[i,2], sep = "")
wind <- readHTMLTable(url,which=1)
wind_prof[i,3] <- as.numeric(substr(wind[1,2], 1, 4))
perc <- format(round((i/nrow(wind_prof)*100), 3), nsmall = 3)
print(paste(perc,"%", sep = ""))
#print(paste(wind_prof[i,1],wind_prof[i,2],sep = ","))
}
# Creates an RDS file with the entire dataset.
saveRDS(Wind_pot, file = paste(paste("WindAtlas_Data", res, sep = "_"),i, sep = ", "))
# Prints the location of the file.
getwd()
# Print the elapsed time
New <- Sys.time() - old
print(New)
}
# Run for loop to enter a series of coordinates in Canada's Wind Atlas and save
# the Annual Mean Wind Speed. THIS TAKES A LONG TIME AND A LOT OF PROCESSING
# POWER. At the end, data will be saved to a RDS in a location printed on screen
{
# Note the start time
old <- Sys.time()
for(i in 5618:nrow(wind_prof)) {
url <- paste(cons1, wind_prof[i,1], cons2, wind_prof[i,2], sep = "")
wind <- readHTMLTable(url,which=1)
wind_prof[i,3] <- as.numeric(substr(wind[1,2], 1, 4))
perc <- format(round((i/nrow(wind_prof)*100), 3), nsmall = 3)
print(paste(paste(perc,"%", sep = ""),i, sep = ", "))
#print(paste(wind_prof[i,1],wind_prof[i,2],sep = ","))
}
# Creates an RDS file with the entire dataset.
saveRDS(Wind_pot, file = paste("WindAtlas_Data", res, sep = "_"))
# Prints the location of the file.
getwd()
# Print the elapsed time
New <- Sys.time() - old
print(New)
}
getwd()
setwd("C:/Users/pawlench/Documents/GitHub/WndSolSim")
# Creates an RDS file with the entire dataset.
saveRDS(Wind_pot, file = paste("WindAtlas_Data", res, sep = "_"))
# Creates an RDS file with the entire dataset.
saveRDS(Wind_prof, file = paste("WindAtlas_Data", res, sep = "_"))
# Creates an RDS file with the entire dataset.
saveRDS(wind_prof, file = paste("WindAtlas_Data", res, sep = "_"))
# Prints the location of the file.
getwd()
# Run for loop to enter a series of coordinates in Canada's Wind Atlas and save
# the Annual Mean Wind Speed. THIS TAKES A LONG TIME AND A LOT OF PROCESSING
# POWER. At the end, data will be saved to a RDS in a location printed on screen
{
# Note the start time
old <- Sys.time()
for(i in 20202:nrow(wind_prof)) {
url <- paste(cons1, wind_prof[i,1], cons2, wind_prof[i,2], sep = "")
wind <- readHTMLTable(url,which=1)
wind_prof[i,3] <- as.numeric(substr(wind[1,2], 1, 4))
perc <- format(round((i/nrow(wind_prof)*100), 3), nsmall = 3)
print(paste(paste(perc,"%", sep = ""),i, sep = ", "))
#print(paste(wind_prof[i,1],wind_prof[i,2],sep = ","))
}
# Creates an RDS file with the entire dataset.
saveRDS(wind_prof, file = paste("WindAtlas_Data", res, sep = "_"))
# Prints the location of the file.
getwd()
# Print the elapsed time
New <- Sys.time() - old
print(New)
}
# Creates an RDS file with the entire dataset.
saveRDS(wind_prof, file = paste("WindAtlas_Data", res, sep = "_"))
{
for(i in 28437:nrow(wind_prof)) {
url <- paste(cons1, wind_prof[i,1], cons2, wind_prof[i,2], sep = "")
wind <- readHTMLTable(url,which=1)
wind_prof[i,3] <- as.numeric(substr(wind[1,2], 1, 4))
perc <- format(round((i/nrow(wind_prof)*100), 3), nsmall = 3)
print(paste(paste(perc,"%", sep = ""),i, sep = ", "))
#print(paste(wind_prof[i,1],wind_prof[i,2],sep = ","))
}
# Creates an RDS file with the entire dataset.
saveRDS(wind_prof, file = paste("WindAtlas_Data", res, sep = "_"))
# Prints the location of the file.
getwd()
# Print the elapsed time
New <- Sys.time() - old
print(New)
}
# Creates an RDS file with the entire dataset.
saveRDS(wind_prof, file = paste("WindAtlas_Data", res, sep = "_"))
