make_plot <- function(yrs,yrf) {
case_Week %>%
subset(., (date >= yrs & date <= yrf)) %>%
ggplot() +
aes(date, Output_MWH, fill = ID) +
geom_area(alpha=0.6, size=.5, colour="black") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
ylim(NA,ylim) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(plot.subtitle = element_text(hjust = 0.5)) +
theme_void() +
scale_fill_manual(values = c("grey", "coral4", "darkslategrey", "goldenrod4",
"dodgerblue", "forestgreen", "cyan", "gold"))
}
make_plot(s2021,f2021)
make_plot <- function(yrs,yrf) {
case_Week %>%
subset(., (date >= yrs & date <= yrf)) %>%
ggplot() +
aes(date, Output_MWH, fill = ID) +
geom_area(alpha=0.6, size=.5, colour="black") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
ylim(NA,ylim) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(plot.subtitle = element_text(hjust = 0.5)) +
scale_fill_manual(values = c("grey", "coral4", "darkslategrey", "goldenrod4",
"dodgerblue", "forestgreen", "cyan", "gold"))
}
make_plot(s2021,f2021)
make_plot <- function(yrs,yrf) {
case_Week %>%
subset(., (date >= yrs & date <= yrf)) %>%
ggplot() +
aes(date, Output_MWH, fill = ID) +
geom_area(alpha=0.6, size=.5, colour="black") +
theme_bw() +
theme(panel.grid = element_blank())
ylim(NA,ylim) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(plot.subtitle = element_text(hjust = 0.5)) +
scale_fill_manual(values = c("grey", "coral4", "darkslategrey", "goldenrod4",
"dodgerblue", "forestgreen", "cyan", "gold"))
}
make_plot(s2021,f2021)
make_plot <- function(yrs,yrf) {
case_Week %>%
subset(., (date >= yrs & date <= yrf)) %>%
ggplot() +
aes(date, Output_MWH, fill = ID) +
geom_area(alpha=0.6, size=.5, colour="black") +
theme_bw() +
theme(panel.grid.major = element_blank())
ylim(NA,ylim) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(plot.subtitle = element_text(hjust = 0.5)) +
scale_fill_manual(values = c("grey", "coral4", "darkslategrey", "goldenrod4",
"dodgerblue", "forestgreen", "cyan", "gold"))
}
make_plot(s2021,f2021)
make_plot <- function(yrs,yrf) {
case_Week %>%
subset(., (date >= yrs & date <= yrf)) %>%
ggplot() +
aes(date, Output_MWH, fill = ID) +
geom_area(alpha=0.6, size=.5, colour="black") +
theme_bw() +
theme(panel.grid.major.y = element_blank())
ylim(NA,ylim) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(plot.subtitle = element_text(hjust = 0.5)) +
scale_fill_manual(values = c("grey", "coral4", "darkslategrey", "goldenrod4",
"dodgerblue", "forestgreen", "cyan", "gold"))
}
make_plot(s2021,f2021)
make_plot <- function(yrs,yrf) {
case_Week %>%
subset(., (date >= yrs & date <= yrf)) %>%
ggplot() +
aes(date, Output_MWH, fill = ID) +
geom_area(alpha=0.6, size=.5, colour="black") +
theme_bw() +
theme(panel.grid.major.y = element_blank()) +
ylim(NA,ylim) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(plot.subtitle = element_text(hjust = 0.5)) +
scale_fill_manual(values = c("grey", "coral4", "darkslategrey", "goldenrod4",
"dodgerblue", "forestgreen", "cyan", "gold"))
}
make_plot(s2021,f2021)
make_plot <- function(yrs,yrf) {
case_Week %>%
subset(., (date >= yrs & date <= yrf)) %>%
ggplot() +
aes(date, Output_MWH, fill = ID) +
geom_area(alpha=0.6, size=.5, colour="black") +
theme_bw() +
theme(panel.grid = element_blank()) +
ylim(NA,ylim) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(plot.subtitle = element_text(hjust = 0.5)) +
scale_fill_manual(values = c("grey", "coral4", "darkslategrey", "goldenrod4",
"dodgerblue", "forestgreen", "cyan", "gold"))
}
make_plot(s2021,f2021)
#Generate plot
resource_plot <- function(yrs,yrf) {
case_Week %>%
subset(., (date >= yrs & date <= yrf)) %>%
ggplot() +
aes(date, Output_MWH, fill = ID) +
geom_area(alpha=0.6, size=.5, colour="black") +
theme_bw() +
theme(panel.grid = element_blank()) +
ylim(NA,ylim) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(plot.subtitle = element_text(hjust = 0.5)) +
scale_fill_manual(values = c("grey", "coral4", "darkslategrey", "goldenrod4",
"dodgerblue", "forestgreen", "cyan", "gold"))
}
#Generate plot
res_plot <- function(yrs,yrf) {
case_Week %>%
subset(., (date >= yrs & date <= yrf)) %>%
ggplot() +
aes(date, Output_MWH, fill = ID) +
geom_area(alpha=0.6, size=.5, colour="black") +
theme_bw() +
theme(panel.grid = element_blank()) +
ylim(NA,ylim) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(plot.subtitle = element_text(hjust = 0.5)) +
scale_fill_manual(values = c("grey", "coral4", "darkslategrey", "goldenrod4",
"dodgerblue", "forestgreen", "cyan", "gold"))
}
c2020 <- res_plot(s2020,f2020)
{
c2020 <- res_plot(s2020,f2020)
c2025 <- res_plot(s2025,f2025)
c2030 <- res_plot(s2030,f2030)
c2035 <- res_plot(s2035,f2035)
}
ggarrange(c2020,c2025,c2030,c2035,
labels = c(2020,2025,2030,2035),
common.legend = TRUE, legend = "right",
ncol = 2, nrow = 2)
FourYr <- function(yr1) {
res_plot(paste("s",yr1, sep = ""), paste("f",yr1, sep = ""))
}
FourYr(2020)
FourYr <- function(St,Fh) {
res_plot(paste("2035-",St," 01:00:00", sep = ""),
paste("2035-",Fh," 23:00:00", sep = ""))
}
FourYr(St,Fh)
Start <- function(year, day) {
paste(year,"-",day," 01:00:00", sep = "")
}
Start(2035,06-01)
Start(2035,"06-01")
Start <- function(year, month, day) {
paste(year,"-", month, "-", day," 01:00:00", sep = "")
}
Start(2035,06,01)
res_plot(Start(2035,07,01),f2035)
DD <- c(St, Fh)
dd <- c(s2035,f2035)
res_plot(dd)
DD <- list(St, Fh)
res_plot(dd)
sapply(DD,res_plot)
sapply(DD,res_plot, yrf=yrf)
#Generate plot
res_plot <- function(year, month, day) {
case_Week %>%
subset(., (date >= paste(year,"-", month, "-", day," 01:00:00", sep = "") &
date <= paste(year,"-", month, "-",
(day+7)," 23:00:00", sep = ""))) %>%
ggplot() +
aes(date, Output_MWH, fill = ID) +
geom_area(alpha=0.6, size=.5, colour="black") +
theme_bw() +
theme(panel.grid = element_blank()) +
ylim(NA,ylim) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(plot.subtitle = element_text(hjust = 0.5)) +
scale_fill_manual(values = c("grey", "coral4", "darkslategrey", "goldenrod4",
"dodgerblue", "forestgreen", "cyan", "gold"))
}
res_plot(2035,07,01)
FourYr <- function(yr1,yr2,yr3,yr4,mon,day) {
ggarrange(res_plot(yr1,mon,day),res_plot(yr2,mon,day),
res_plot(yr3,mon,day),res_plot(yr4,mon,day),
labels = c(2020,2025,2030,2035),
common.legend = TRUE, legend = "right",
ncol = 2, nrow = 2)
}
FourYr(2020,2025,2030,2035,07,01)
FourYr(2020,2025,2035,07,01)
# Create function to make the four plots
FourYr <- function(month,day,yr1,yr2,yr3,yr4) {
if(missing(yr4) & missing(yr3) & missing(yr2)) {
res_plot(yr1,month,day)
} elseif (missing(yr4) & missing(yr3)) {
ggarrange(res_plot(yr1,month,day),res_plot(yr2,month,day),
labels = c(yr1,yr2),
common.legend = TRUE, legend = "right",
ncol = 2, nrow = 1)
} elseif (missng(yr4)) {
ggarrange(res_plot(yr1,month,day),res_plot(yr2,month,day),
res_plot(yr3,month,day),res_plot(yr4,month,day),
labels = c(yr1,yr2,yr3),
common.legend = TRUE, legend = "right",
ncol = 2, nrow = 2)
} else {
ggarrange(res_plot(yr1,month,day),res_plot(yr2,month,day),
res_plot(yr3,month,day),res_plot(yr4,month,day),
labels = c(2020,2025,2030,2035),
common.legend = TRUE, legend = "right",
ncol = 2, nrow = 2)
}}
# Create function to make the four plots
FourYr <- function(month,day,yr1,yr2,yr3,yr4) {
if(missing(yr4) & missing(yr3) & missing(yr2)) {
res_plot(yr1,month,day)
} elseif (missing(yr4) & missing(yr3)) {
ggarrange(res_plot(yr1,month,day),res_plot(yr2,month,day),
labels = c(yr1,yr2),
common.legend = TRUE, legend = "right",
ncol = 2, nrow = 1)
} elseif (missng(yr4)) {
ggarrange(res_plot(yr1,month,day),res_plot(yr2,month,day),
res_plot(yr3,month,day),res_plot(yr4,month,day),
labels = c(yr1,yr2,yr3),
common.legend = TRUE, legend = "right",
ncol = 2, nrow = 2)
} else {
ggarrange(res_plot(yr1,month,day),res_plot(yr2,month,day),
res_plot(yr3,month,day),res_plot(yr4,month,day),
labels = c(2020,2025,2030,2035),
common.legend = TRUE, legend = "right",
ncol = 2, nrow = 2)
}
}
# Create function to make the four plots
FourYr <- function(month,day,yr1,yr2,yr3,yr4) {
if(missing(yr4) & missing(yr3) & missing(yr2)) {
res_plot(yr1,month,day)
} elseif (missing(yr4) & missing(yr3)) {
ggarrange(res_plot(yr1,month,day),res_plot(yr2,month,day),
labels = c(yr1,yr2),
common.legend = TRUE, legend = "right",
ncol = 2, nrow = 1)
} elseif (missng(yr4)) {
ggarrange(res_plot(yr1,month,day),res_plot(yr2,month,day),
res_plot(yr3,month,day),
labels = c(yr1,yr2,yr3),
common.legend = TRUE, legend = "right",
ncol = 2, nrow = 2)
} else {
ggarrange(res_plot(yr1,month,day),res_plot(yr2,month,day),
res_plot(yr3,month,day),res_plot(yr4,month,day),
labels = c(2020,2025,2030,2035),
common.legend = TRUE, legend = "right",
ncol = 2, nrow = 2)
}
}
# Create function to make the four plots
FourYr <- function(month,day,yr1,yr2,yr3,yr4) {
ggarrange(res_plot(yr1,month,day),res_plot(yr2,month,day),
res_plot(yr3,month,day),res_plot(yr4,month,day),
labels = c(2020,2025,2030,2035),
common.legend = TRUE, legend = "right",
ncol = 2, nrow = 2)
}
{
library(tidyverse)
library(ggplot2)
library(grid)
library(gtable)
library(gridExtra)
library(odbc)
library(ggpubr)
library(DBI)
library(lubridate)
library(cowplot)
library(scales)
library(dplyr)
}
{
DB <- "Apr_25_2022"
# Connect to SQL database
################################################################################
con <- dbConnect(odbc(),
Driver = "SQL Server",
Server = "192.168.0.139,49172",
Database = DB,
UID = "admin",
PWD = "SOB704910",
Port = 49172)
# Connect to MySQL database
################################################################################
#  con1 <- dbConnect(RMariaDB::MariaDB(),
#                   user = 'tpawl',
#                   password = 'Aurora2022!',
#                   Driver = "SQL Server",
#                   host='192.168.0.139',
#                   dbname = DB,
#                   port = 3306)
}
{
# Write data to environment and set variables
################################################################################
Hour <- dbReadTable(con,'ResourceGroupHour1')
Month <- dbReadTable(con,'ResourceGroupMonth1')
Year  <- dbReadTable(con,'ResourceGroupYear1')
#Build <- dbReadTable(con,'LTBuildReport1')
ZoneHour <- dbReadTable(con,'ZoneHour1')
Resource <- dbReadTable(con,'ResourceMonth1')
#LTRes <- dbReadTable(con,'LTResValue1')
setwd("D:/Documents/GitHub/AuroraEval")
source("aeso_sim_comp.R")
source("sim_eval.R")
source("aeso_eval.R")
{
Yr4Sp <- list(2020,2025,2030,2035)
Yr2Sp <- list(2020,2021)
BC <- "Base Case"
MS  <- "Minimum Solar Constraint"
LCT <- "Low Carbon Tax"
HS <- "Hypothetical Sites"
# Converts the date and time and identifies the week when applicable
################################################################################
{
Hour$date <- as.POSIXct(as.character(ymd_h(gsub(" Hr ", "_",Hour$Time_Period))),
tz = "MST")-(60*60)
Month$Time_Period <- ym(Month$Time_Period)
Year$Time_Period  <- as.Date(as.character(Year$Time_Period),
format = "%Y")
ZoneHour$date <- as.POSIXct(as.character(ymd_h(gsub(" Hr ", "_",ZoneHour$Time_Period))),
tz = "MST")-(60*60)
# Selects only the required columns
################################################################################
Hour <- Hour %>%
subset(., select = c(ID, date, Output_MWH, Run_ID))
ZH <- ZoneHour %>%
filter(Name == "WECC_Alberta") %>%
filter(Condition == "Average") %>%
subset(., select = c(date, Price, Baseline_Demand, Demand, Demand_Total,
Net_Load, Net_Load_Total, Marginal_Resource,
Smp_Max_Date_Time, Smp_Max_Demand, Smp_Max_Capacity,
Run_ID, Imports, Exports))
ZoneH <- ZoneHour %>%
filter(Name == "WECC_Alberta") %>%
subset(., select = c(date, Condition, Price, Demand, Marginal_Resource, Report_Year,
Run_ID))
# Select the Import/Export data
Import <- ZH %>%
subset(., select = c(date, Imports, Run_ID)) %>%
'colnames<-'(c("date", "Output_MWH", "Run_ID")) %>%
add_column(ID = "Import")
}
}
}
{
setwd("D:/Documents/Education/Masters Degree/Datasets/Market")
load("nrgstream_gen.RData")
nrgstream_gen <- nrgstream_gen %>% rename(time=Time)
setwd("D:/Documents/GitHub/AuroraEval")
errors<-nrgstream_gen %>% filter(is.na(Price),date<Sys.Date())
gen_errors<-nrgstream_gen %>% filter(is.na(gen),date<Sys.Date())
nrgstream_gen<-nrgstream_gen[!is.na(nrgstream_gen$gen),]
nrgstream_gen<-nrgstream_gen[!is.na(nrgstream_gen$time),]
sub_samp<-filter(nrgstream_gen, time >= as.Date("2018-01-1"))
demand <- sub_samp %>%
group_by(time) %>%
summarise(Demand = median(Demand),
Price = median(Price),
AIL = median(AIL))
trade_excl<-c("AB - WECC Imp Hr Avg MW", "AB - WECC Exp Hr Avg MW","AB - WECC Imp/Exp Hr Avg MW")
df1 <- sub_samp %>%
filter(! NRG_Stream %in% trade_excl)%>%
group_by(Plant_Type,time) %>%
summarise(meancap = mean(Cap_Fac),
total_gen=sum(gen,na.rm = T),
total_rev=sum(Revenue,na.rm = T),
price_mean=mean(Price),
heatrt_mean=mean(Heat.Rate)) %>%
ungroup()
df1$Day <- date(df1$time)
df1$Year <- as.factor(year(df1$time))
# Identify the Plant Types
################################################################################
gen_set<-c("COAL","COGEN","HYDRO","NGCC", "OTHER", "SCGT","SOLAR","IMPORT","EXPORT","WIND")
df1a <- df1 %>%
filter(Plant_Type %in% gen_set,year(time)<2022)
df1a$Plant_Type<-fct_relevel(df1a$Plant_Type, "OTHER",after=Inf)
df1a$Plant_Type<-fct_relevel(df1a$Plant_Type, "HYDRO",after=Inf)
df1a$Plant_Type<-fct_relevel(df1a$Plant_Type, "WIND",after=Inf)
df1a$Plant_Type<-fct_relevel(df1a$Plant_Type, "SOLAR",after=Inf)
df1a$Plant_Type<-fct_relevel(df1a$Plant_Type, "IMPORT",after=Inf)
df1a$Plant_Type<-fct_relevel(df1a$Plant_Type, "EXPORT",after=Inf)
}
AESO_Sim(2020,03,01,BC)
# Converts the date and time and identifies the week when applicable
################################################################################
{
Hour$date <- as.POSIXct(as.character(ymd_h(gsub(" Hr ", "_",Hour$Time_Period))),
tz = "MST")-(60*60)
Month$Time_Period <- ym(Month$Time_Period)
Year$Time_Period  <- as.Date(as.character(Year$Time_Period),
format = "%Y")
ZoneHour$date <- as.POSIXct(as.character(ymd_h(gsub(" Hr ", "_",ZoneHour$Time_Period))),
tz = "MST")-(60*60)
# Selects only the required columns
################################################################################
Hour <- Hour %>%
subset(., select = c(ID, date, Output_MWH, Run_ID))
ZH <- ZoneHour %>%
filter(Name == "WECC_Alberta") %>%
filter(Condition == "Average") %>%
subset(., select = c(date, Price, Baseline_Demand, Demand, Demand_Total,
Net_Load, Net_Load_Total, Marginal_Resource,
Smp_Max_Date_Time, Smp_Max_Demand, Smp_Max_Capacity,
Run_ID, Imports, Exports))
ZoneH <- ZoneHour %>%
filter(Name == "WECC_Alberta") %>%
subset(., select = c(date, Condition, Price, Demand, Marginal_Resource, Report_Year,
Run_ID))
# Select the Import/Export data
Import <- ZH %>%
subset(., select = c(date, Imports, Run_ID)) %>%
'colnames<-'(c("date", "Output_MWH", "Run_ID")) %>%
add_column(ID = "Import")
Export <- ZH %>%
subset(., select = c(date, Exports, Run_ID)) %>%
'colnames<-'(c("date", "Output_MWH", "Run_ID")) %>%
add_column(ID = "Export")
Export$Output_MWH <- Export$Output_MWH * -1
}
{
# Write data to environment and set variables
################################################################################
Hour <- dbReadTable(con,'ResourceGroupHour1')
Month <- dbReadTable(con,'ResourceGroupMonth1')
Year  <- dbReadTable(con,'ResourceGroupYear1')
#Build <- dbReadTable(con,'LTBuildReport1')
ZoneHour <- dbReadTable(con,'ZoneHour1')
Resource <- dbReadTable(con,'ResourceMonth1')
#LTRes <- dbReadTable(con,'LTResValue1')
setwd("D:/Documents/GitHub/AuroraEval")
source("aeso_sim_comp.R")
source("sim_eval.R")
source("aeso_eval.R")
{
Yr4Sp <- list(2020,2025,2030,2035)
Yr2Sp <- list(2020,2021)
BC <- "Base Case"
MS  <- "Minimum Solar Constraint"
LCT <- "Low Carbon Tax"
HS <- "Hypothetical Sites"
# Converts the date and time and identifies the week when applicable
################################################################################
{
Hour$date <- as.POSIXct(as.character(ymd_h(gsub(" Hr ", "_",Hour$Time_Period))),
tz = "MST")-(60*60)
Month$Time_Period <- ym(Month$Time_Period)
Year$Time_Period  <- as.Date(as.character(Year$Time_Period),
format = "%Y")
ZoneHour$date <- as.POSIXct(as.character(ymd_h(gsub(" Hr ", "_",ZoneHour$Time_Period))),
tz = "MST")-(60*60)
# Selects only the required columns
################################################################################
Hour <- Hour %>%
subset(., select = c(ID, date, Output_MWH, Run_ID))
ZH <- ZoneHour %>%
filter(Name == "WECC_Alberta") %>%
filter(Condition == "Average") %>%
subset(., select = c(date, Price, Baseline_Demand, Demand, Demand_Total,
Net_Load, Net_Load_Total, Marginal_Resource,
Smp_Max_Date_Time, Smp_Max_Demand, Smp_Max_Capacity,
Run_ID, Imports, Exports))
ZoneH <- ZoneHour %>%
filter(Name == "WECC_Alberta") %>%
subset(., select = c(date, Condition, Price, Demand, Marginal_Resource, Report_Year,
Run_ID))
# Select the Import/Export data
Import <- ZH %>%
subset(., select = c(date, Imports, Run_ID)) %>%
'colnames<-'(c("date", "Output_MWH", "Run_ID")) %>%
add_column(ID = "Import")
Export <- ZH %>%
subset(., select = c(date, Exports, Run_ID)) %>%
'colnames<-'(c("date", "Output_MWH", "Run_ID")) %>%
add_column(ID = "Export")
Export$Output_MWH <- Export$Output_MWH * -1
}
}
}
AESO_Sim(2020,03,01,BC)
# Set limits for plots to be consistent
ylimit <- max(Hour$Output_MWH) + max(ZoneHour$Imports)
# Set legend variables
colours = c("darkslateblue", "grey", "darkslategrey", "coral4", "goldenrod4",
"dodgerblue", "forestgreen", "gold", "darkolivegreen1", "cyan")
colours1 = c("darkslateblue", "grey", "darkslategrey", "coral4", "goldenrod4",
"darkcyan", "dodgerblue", "forestgreen", "gold", "cyan")
colours2 = c("grey", "darkslategrey", "coral4", "goldenrod4",
"dodgerblue", "darkcyan", "forestgreen", "gold", "cyan")
colours3 = c("forestgreen", "gold", "coral4", "goldenrod4", "cyan", "dodgerblue")
AESO_Sim(2020,03,01,BC)
comp_dur(2020,2021,BC)
