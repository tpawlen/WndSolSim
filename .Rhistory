labs(y = "$/MWh", fill = "Resource") +
scale_x_datetime(expand=c(0,0)) +
scale_y_continuous(expand=c(0,0),
limits= c(MN,MX),
#                       labels = label_number(accuracy = 1),
breaks = seq(MN, MX, by = MX/4)
)
}
AESO_Sim(2020,03,01,BC)
wkPrice <- function(year,month,day) {
wk_st <- as.POSIXct(paste(day,month,year, sep = "/"), format="%d/%m/%Y")
wk_end <- as.POSIXct(paste(day+14,month,year, sep = "/"), format="%d/%m/%Y")
price_WK <- demand %>%
filter(time >= wk_st & time <= wk_end)
ggplot() +
geom_line(data = price_WK,
aes(x=time, y=Price),
size = 1.5, color="red") +
scale_x_datetime(expand=c(0,0)) +
theme_bw() +
theme(panel.background = element_rect(fill = "transparent"),
panel.grid = element_blank(),
plot.background = element_rect(fill = "transparent", color = NA),
text = element_text(size= 15)
) +
scale_y_continuous(expand=c(0,0)) +
labs(x = "Date", y = "Pool Price \n($/MWh)")
}
week_price <- function(year, month, day,case) {
# Filters for the desired case study
data <- ZH %>%
filter(Run_ID == case)
# Select only a single week using function HrTime
ZPrice <- HrTime(data,year,month,day)
# Set the max and min for the plot
MX <- plyr::round_any(max(abs(ZPrice$Price)), 10, f = ceiling)
MN <- plyr::round_any(min(abs(ZPrice$Price)), 10, f = floor)
# Plot the data
ggplot() +
geom_line(data = ZPrice,
aes(x = date, y = Price),
size = 1.5, colour = "red") +
theme_bw() +
theme(panel.grid = element_blank(),
text = element_text(size= 15)
) +
labs(y = "Pool Price \n$/MWh", fill = "Resource") +
scale_x_datetime(expand=c(0,0)) +
scale_y_continuous(expand=c(0,0),
limits= c(MN,MX),
#                       labels = label_number(accuracy = 1),
breaks = seq(MN, MX, by = MX/4)
)
}
AESO_Sim(2020,03,01,BC)
week_price <- function(year, month, day,case) {
# Filters for the desired case study
data <- ZH %>%
filter(Run_ID == case)
# Select only a single week using function HrTime
ZPrice <- HrTime(data,year,month,day)
# Set the max and min for the plot
MX <- plyr::round_any(max(abs(ZPrice$Price)), 10, f = ceiling)
MN <- plyr::round_any(min(abs(ZPrice$Price)), 10, f = floor)
# Plot the data
ggplot() +
geom_line(data = ZPrice,
aes(x = date, y = Price),
size = 1.5, colour = "red") +
theme_bw() +
theme(panel.background = element_rect(fill = "transparent"),
panel.grid = element_blank(),
plot.background = element_rect(fill = "transparent", color = NA),
text = element_text(size= 15)
) +
labs(y = "Pool Price \n$/MWh", fill = "Resource") +
scale_x_datetime(expand=c(0,0)) +
scale_y_continuous(expand=c(0,0),
limits= c(MN,MX),
#                       labels = label_number(accuracy = 1),
breaks = seq(MN, MX, by = MX/4)
)
}
AESO_Sim(2021,04,01,BC)
AESO_Sim(2021,03,01,BC)
AESO_Sim(2020,03,01,BC)
ggsave(path = "images", filename = "simvsact.png", bg = "transparent")
year <- 2021
price_WK <- demand %>%
filter(time >= wk_st & time <= wk_end)
ggplot() +
geom_line(data = price_WK,
aes(x=time, y=Price),
size = 1.5, color="red") +
scale_x_datetime(expand=c(0,0)) +
theme_bw() +
theme(panel.background = element_rect(fill = "transparent"),
panel.grid = element_blank(),
plot.background = element_rect(fill = "transparent", color = NA),
text = element_text(size= 15)
) +
scale_y_continuous(expand=c(0,0)) +
labs(x = "Date", y = "Pool Price \n($/MWh)")
month <- 04
ggplot() +
geom_line(data = price_WK,
aes(x=time, y=Price),
size = 1.5, color="red") +
scale_x_datetime(expand=c(0,0)) +
theme_bw() +
theme(panel.background = element_rect(fill = "transparent"),
panel.grid = element_blank(),
plot.background = element_rect(fill = "transparent", color = NA),
text = element_text(size= 15)
) +
scale_y_continuous(expand=c(0,0)) +
labs(x = "Date", y = "Pool Price \n($/MWh)")
wk_st <- as.POSIXct(paste(day,month,year, sep = "/"), format="%d/%m/%Y")
wk_end <- as.POSIXct(paste(day+14,month,year, sep = "/"), format="%d/%m/%Y")
price_WK <- demand %>%
filter(time >= wk_st & time <= wk_end)
ggplot() +
geom_line(data = price_WK,
aes(x=time, y=Price),
size = 1.5, color="red") +
scale_x_datetime(expand=c(0,0)) +
theme_bw() +
theme(panel.background = element_rect(fill = "transparent"),
panel.grid = element_blank(),
plot.background = element_rect(fill = "transparent", color = NA),
text = element_text(size= 15)
) +
scale_y_continuous(expand=c(0,0)) +
labs(x = "Date", y = "Pool Price \n($/MWh)")
View(price_WK)
SimP <- week_price(year,month,day,case)
ActP <- wkPrice(year,month,day)
SimO <- Week1(year,month,day,case)
ActO <- Week_act(year,month,day)
MXP <- plyr::round_any(
max(layer_scales(SimP)$y$range$range,layer_scales(ActP)$y$range$range),
10, f = ceiling)
MNP <- plyr::round_any(
min(layer_scales(SimP)$y$range$range,layer_scales(ActP)$y$range$range),
10, f = ceiling)
MNP
AESO_Sim <- function(year,month,day,case) {
SimP <- week_price(year,month,day,case)
ActP <- wkPrice(year,month,day)
SimO <- Week1(year,month,day,case)
ActO <- Week_act(year,month,day)
MXP <- plyr::round_any(
max(layer_scales(SimP)$y$range$range,layer_scales(ActP)$y$range$range),
10, f = ceiling)
MNP <- plyr::round_any(
min(layer_scales(SimP)$y$range$range,layer_scales(ActP)$y$range$range),
10, f = floor)
MXO <- plyr::round_any(
max(layer_scales(SimO)$y$range$range,layer_scales(ActO)$y$range$range),
100, f = ceiling)
MNO <- plyr::round_any(
min(layer_scales(SimO)$y$range$range,layer_scales(ActO)$y$range$range),
100, f = floor)
ggarrange(arrangeGrob(plot_grid(week_price(year,month,day,case) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank()) +
scale_y_continuous(expand=c(0,0), limits = c(MNP,MXP),
breaks = seq(MNP, MXP, by = MXP/4)),
Week1(year,month,day,case)+
theme(legend.position ="none") +
scale_y_continuous(expand=c(0,0), limits = c(MNO,MXO),
breaks = seq(MNO, MXO, by = MXO/4)),
ncol = 1, align="v", axis = "l",
rel_heights = c(1,2.5))+
ggtitle(paste("Simulated Data for ",year," (",DB,")", sep = ""))+
theme(legend.position ="none",
plot.title = element_text(hjust = 0.5)),
plot_grid(wkPrice(year,month,day) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank()) +
scale_y_continuous(expand=c(0,0), limits = c(MNP,MXP),
breaks = seq(MNP, MXP, by = MXP/4)),
Week_act(year,month,day)+
theme(legend.position ="none") +
scale_y_continuous(expand=c(0,0), limits = c(MNO,MXO),
breaks = seq(MNO, MXO, by = MXO/4)),
ncol = 1, align="v", axis = "l",
rel_heights = c(1,2.5)) +
ggtitle(paste("AESO Data for ",year,sep=""))+
theme(legend.position ="none",
plot.title = element_text(hjust = 0.5)),
ncol=2),
arrangeGrob(g_legend(Week1(year,month,day,case)),
g_legend(Week_act(year,month,day)),
nrow=2),
ncol=2, widths = c(5,1))
}
AESO_Sim(2021,04,01,BC)
EvalPerc(Year,BC)
EvalPerc <- function(input,case) {
# Filters for the desired case study
data <- input %>%
filter(Run_ID == case & Condition == "Average")# %>%
#    group_by(Time_Period, ID) %>%
#    summarise(n = sum(Output_MWH)) %>%
#    mutate(Percentage = n / sum(n))
# Filter the data by resource
case_Time <- sim_filt(data)
# Remove negative generation (Storage)
case_Time$Output_MWH[case_Time$Output_MWH < 0] <- NA
case_Time %>%
ggplot() +
aes(Time_Period, Output_MWH, fill = ID) +
geom_area(position = "fill", alpha=0.6, size=.5, colour="black") +
#    facet_wrap(~ Condition, nrow = 1) +
theme_bw() +
theme(panel.grid = element_blank(),
axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
legend.justification = c(0,0.5)) +
scale_x_date(expand=c(0,0)) +
scale_y_continuous(expand=c(0,0),
labels = scales::percent) +
scale_fill_manual(values = colours2) +
labs(x = "Date", y = "Percentage of Generation", fill = "Resource")
}
EvalPerc(Year,BC)
EvalPerc <- function(input,case) {
# Filters for the desired case study
data <- input %>%
filter(Run_ID == case & Condition == "Average")# %>%
#    group_by(Time_Period, ID) %>%
#    summarise(n = sum(Output_MWH)) %>%
#    mutate(Percentage = n / sum(n))
# Filter the data by resource
case_Time <- sim_filt(data)
# Remove negative generation (Storage)
case_Time$Output_MWH[case_Time$Output_MWH < 0] <- NA
case_Time %>%
ggplot() +
aes(Time_Period, Output_MWH, fill = ID) +
geom_area(position = "fill", alpha=0.6, size=.5, colour="black") +
geom_hline(yintercept = 0.3) +
#    facet_wrap(~ Condition, nrow = 1) +
theme_bw() +
theme(panel.grid = element_blank(),
axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
legend.justification = c(0,0.5)) +
scale_x_date(expand=c(0,0)) +
scale_y_continuous(expand=c(0,0),
labels = scales::percent) +
scale_fill_manual(values = colours2) +
labs(x = "Date", y = "Percentage of Generation", fill = "Resource")
}
EvalPerc(Year,BC)
EvalPerc <- function(input,case) {
# Filters for the desired case study
data <- input %>%
filter(Run_ID == case & Condition == "Average")# %>%
#    group_by(Time_Period, ID) %>%
#    summarise(n = sum(Output_MWH)) %>%
#    mutate(Percentage = n / sum(n))
# Filter the data by resource
case_Time <- sim_filt(data)
# Remove negative generation (Storage)
case_Time$Output_MWH[case_Time$Output_MWH < 0] <- NA
case_Time %>%
ggplot() +
aes(Time_Period, Output_MWH, fill = ID) +
geom_area(position = "fill", alpha=0.6, size=.5, colour="black") +
geom_hline(yintercept = 0.3, linetype = "dotted", color = "green") +
geom_vline(xintercept = 2035) +
#    facet_wrap(~ Condition, nrow = 1) +
theme_bw() +
theme(panel.grid = element_blank(),
axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
legend.justification = c(0,0.5)) +
scale_x_date(expand=c(0,0)) +
scale_y_continuous(expand=c(0,0),
labels = scales::percent) +
scale_fill_manual(values = colours2) +
labs(x = "Date", y = "Percentage of Generation", fill = "Resource")
}
EvalPerc(Year,BC)
EvalPerc <- function(input,case) {
# Filters for the desired case study
data <- input %>%
filter(Run_ID == case & Condition == "Average")# %>%
#    group_by(Time_Period, ID) %>%
#    summarise(n = sum(Output_MWH)) %>%
#    mutate(Percentage = n / sum(n))
# Filter the data by resource
case_Time <- sim_filt(data)
# Remove negative generation (Storage)
case_Time$Output_MWH[case_Time$Output_MWH < 0] <- NA
case_Time %>%
ggplot() +
aes(Time_Period, Output_MWH, fill = ID) +
geom_area(position = "fill", alpha=0.6, size=.5, colour="black") +
geom_hline(yintercept = 0.3, linetype = "dotted", color = "green", size = 1.5) +
geom_vline(xintercept = 2035) +
#    facet_wrap(~ Condition, nrow = 1) +
theme_bw() +
theme(panel.grid = element_blank(),
axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
legend.justification = c(0,0.5)) +
scale_x_date(expand=c(0,0)) +
scale_y_continuous(expand=c(0,0),
labels = scales::percent) +
scale_fill_manual(values = colours2) +
labs(x = "Date", y = "Percentage of Generation", fill = "Resource")
}
EvalPerc(Year,BC)
EvalPerc <- function(input,case) {
# Filters for the desired case study
data <- input %>%
filter(Run_ID == case & Condition == "Average")# %>%
#    group_by(Time_Period, ID) %>%
#    summarise(n = sum(Output_MWH)) %>%
#    mutate(Percentage = n / sum(n))
# Filter the data by resource
case_Time <- sim_filt(data)
# Remove negative generation (Storage)
case_Time$Output_MWH[case_Time$Output_MWH < 0] <- NA
case_Time %>%
ggplot() +
aes(Time_Period, Output_MWH, fill = ID) +
geom_area(position = "fill", alpha=0.6, size=.5, colour="black") +
geom_hline(yintercept = 0.3, linetype = "dashed", color = "forestgreen", size = 1.5) +
geom_vline(xintercept = 2035, linetype = "dashed", color = "forestgreen", size = 1.5) +
#    facet_wrap(~ Condition, nrow = 1) +
theme_bw() +
theme(panel.grid = element_blank(),
axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
legend.justification = c(0,0.5)) +
scale_x_date(expand=c(0,0)) +
scale_y_continuous(expand=c(0,0),
labels = scales::percent) +
scale_fill_manual(values = colours2) +
labs(x = "Date", y = "Percentage of Generation", fill = "Resource")
}
EvalPerc(Year,BC)
EvalPerc <- function(input,case) {
# Filters for the desired case study
data <- input %>%
filter(Run_ID == case & Condition == "Average")# %>%
#    group_by(Time_Period, ID) %>%
#    summarise(n = sum(Output_MWH)) %>%
#    mutate(Percentage = n / sum(n))
# Filter the data by resource
case_Time <- sim_filt(data)
# Remove negative generation (Storage)
case_Time$Output_MWH[case_Time$Output_MWH < 0] <- NA
case_Time %>%
ggplot() +
aes(Time_Period, Output_MWH, fill = ID) +
geom_area(position = "fill", alpha=0.6, size=.5, colour="black") +
geom_hline(yintercept = 0.3, linetype = "dashed", color = "forestgreen", size = 1.5) +
geom_vline(xintercept = as.Date(2035), linetype = "dashed", color = "forestgreen", size = 1.5) +
#    facet_wrap(~ Condition, nrow = 1) +
theme_bw() +
theme(panel.grid = element_blank(),
axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
legend.justification = c(0,0.5)) +
scale_x_date(expand=c(0,0)) +
scale_y_continuous(expand=c(0,0),
labels = scales::percent) +
scale_fill_manual(values = colours2) +
labs(x = "Date", y = "Percentage of Generation", fill = "Resource")
}
EvalPerc(Year,BC)
EvalPerc <- function(input,case) {
# Filters for the desired case study
data <- input %>%
filter(Run_ID == case & Condition == "Average")# %>%
#    group_by(Time_Period, ID) %>%
#    summarise(n = sum(Output_MWH)) %>%
#    mutate(Percentage = n / sum(n))
# Filter the data by resource
case_Time <- sim_filt(data)
# Remove negative generation (Storage)
case_Time$Output_MWH[case_Time$Output_MWH < 0] <- NA
case_Time %>%
ggplot() +
aes(Time_Period, Output_MWH, fill = ID) +
geom_area(position = "fill", alpha=0.6, size=.5, colour="black") +
geom_hline(yintercept = 0.3, linetype = "dashed", color = "forestgreen", size = 1.5) +
geom_vline(xintercept = as.Date(ISOdate(2035, 1,1)),
linetype = "dashed", color = "forestgreen", size = 1.5) +
#    facet_wrap(~ Condition, nrow = 1) +
theme_bw() +
theme(panel.grid = element_blank(),
axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
legend.justification = c(0,0.5)) +
scale_x_date(expand=c(0,0)) +
scale_y_continuous(expand=c(0,0),
labels = scales::percent) +
scale_fill_manual(values = colours2) +
labs(x = "Date", y = "Percentage of Generation", fill = "Resource")
}
EvalPerc(Year,BC)
EvalPerc <- function(input,case) {
# Filters for the desired case study
data <- input %>%
filter(Run_ID == case & Condition == "Average")# %>%
#    group_by(Time_Period, ID) %>%
#    summarise(n = sum(Output_MWH)) %>%
#    mutate(Percentage = n / sum(n))
# Filter the data by resource
case_Time <- sim_filt(data)
# Remove negative generation (Storage)
case_Time$Output_MWH[case_Time$Output_MWH < 0] <- NA
case_Time %>%
ggplot() +
aes(Time_Period, Output_MWH, fill = ID) +
geom_area(position = "fill", alpha=0.6, size=.5, colour="black") +
geom_hline(yintercept = 0.3, linetype = "dashed", color = "forestgreen", size = 1.5) +
geom_vline(xintercept = as.Date(ISOdate(2035, 1,1)),
linetype = "dashed", color = "dodgerblue", size = 1.5) +
#    facet_wrap(~ Condition, nrow = 1) +
theme_bw() +
theme(panel.grid = element_blank(),
axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
legend.justification = c(0,0.5)) +
scale_x_date(expand=c(0,0)) +
scale_y_continuous(expand=c(0,0),
labels = scales::percent) +
scale_fill_manual(values = colours2) +
labs(x = "Date", y = "Percentage of Generation", fill = "Resource")
}
EvalPerc(Year,BC)
EvalPerc <- function(input,case) {
# Filters for the desired case study
data <- input %>%
filter(Run_ID == case & Condition == "Average")# %>%
#    group_by(Time_Period, ID) %>%
#    summarise(n = sum(Output_MWH)) %>%
#    mutate(Percentage = n / sum(n))
# Filter the data by resource
case_Time <- sim_filt(data)
# Remove negative generation (Storage)
case_Time$Output_MWH[case_Time$Output_MWH < 0] <- NA
case_Time %>%
ggplot() +
aes(Time_Period, Output_MWH, fill = ID) +
geom_area(position = "fill", alpha=0.6, size=.5, colour="black") +
geom_hline(yintercept = 0.3, linetype = "dashed", color = "forestgreen", size = 1.5) +
geom_vline(xintercept = as.Date(ISOdate(2035, 1,1)),
linetype = "dashed", color = "dodgerblue", size = 1.5) +
#    facet_wrap(~ Condition, nrow = 1) +
theme_bw() +
theme(panel.grid = element_blank(),
axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
legend.justification = c(0,0.5)) +
scale_x_date(expand=c(0,0)) +
scale_y_continuous(expand=c(0,0),
labels = scales::percent, 0.3) +
scale_fill_manual(values = colours2) +
labs(x = "Date", y = "Percentage of Generation", fill = "Resource")
}
EvalPerc(Year,BC)
EvalPerc <- function(input,case) {
# Filters for the desired case study
data <- input %>%
filter(Run_ID == case & Condition == "Average")# %>%
#    group_by(Time_Period, ID) %>%
#    summarise(n = sum(Output_MWH)) %>%
#    mutate(Percentage = n / sum(n))
# Filter the data by resource
case_Time <- sim_filt(data)
# Remove negative generation (Storage)
case_Time$Output_MWH[case_Time$Output_MWH < 0] <- NA
case_Time %>%
ggplot() +
aes(Time_Period, Output_MWH, fill = ID) +
geom_area(position = "fill", alpha=0.6, size=.5, colour="black") +
geom_hline(yintercept = 0.3, linetype = "dashed", color = "forestgreen", size = 1.5) +
geom_vline(xintercept = as.Date(ISOdate(2035, 1,1)),
linetype = "dashed", color = "dodgerblue", size = 1.5) +
#    facet_wrap(~ Condition, nrow = 1) +
theme_bw() +
theme(panel.grid = element_blank(),
axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
legend.justification = c(0,0.5)) +
scale_x_date(expand=c(0,0)) +
scale_y_continuous(expand=c(0,0),
labels = scales::percent,
breaks = sort(c(seq(0,1,length.out=5),0.3))) +
scale_fill_manual(values = colours2) +
labs(x = "Date", y = "Percentage of Generation", fill = "Resource")
}
EvalPerc(Year,BC)
EvalOut(Year,BC)
